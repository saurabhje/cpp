// Using vectors and Pair(containers) in the nested sitatation/..
-------------------------------------------------------------------------------------------------------------------------------------------
#include<iostream>
#include<vector>
#include<string>
using namespace std;
void printvect(vector<pair<int,string>> v){
    for(int i=0;i<v.size();++i){
        cout << "\nVector of Pair is: \n";
        cout << v[i].first << " " << v[i].second;
    }
};
int main(){
    vector<pair<int,string>> v;
    cout << "size: "<< endl;
    int n;
    cin >>n;
    for(int i=0;i<n;++i){
        int x;
        string y;
        cin >> x >> y;
        v.push_back({x,y});
    }
    printvect(v);
    return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------
// Array of vectors

#include <iostream>
#include<vector>
using namespace std;
void printvec(vector<int> &v){
    for(int i=0;i<v.size();i++){
        cout << v[i]<< " ";
    }
    cout << endl;
}
int main() {
    int N;
    cin >> N; // total no. of array
    vector<int> v[N];
    for(int i=0;i<N;i++){
        int n;
        cin >> n; /// Size of invidual vector
        for(int j=0;j<n;j++){
            int x;
            cin >> x;
            v[i].push_back(x);
        }
    }
    for(int i=0;i<N;i++){
        printvec(v[i]);
    }

    return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------------------
// Vector of Vectors


#include <iostream>
#include<vector>
using namespace std;
void printvec(vector<int> &v){
    cout <<  "size: "<<v.size() << endl;
    for(int i=0;i<v.size();i++){
        cout << v[i]<< " ";
    }
    cout << endl;
}
int main() {
    int N;
    cin >> N; // no. of vectors to be stored in the master vector
    vector<vector <int>> v;
    for(int i=0;i<N;i++){
        int n;
        cin >> n; 
        vector<int> temp;
        for(int j=0;j<n;j++){
            int x;
            cin >> x;
            temp.push_back(x);
        }
        v.push_back(temp);
    }
    for(int i=0;i<v.size();i++){
        printvec(v[i]);
    }

    return 0;
}
\___________________________________________________________________________________________
ITERATORS


#include<iostream>
#include<vector>
using namespace std;
int  main(){
    vector<int> v= {1,2,3,4,5};
    for(int i=0;i<v.size();i++){
        cout << v[i]<< " ";
    }
    cout << "\n";
    vector<pair<int,int>> v_p ={{1,3},{1,4},{4,7},{8,7}};
    vector<pair<int,int>> :: iterator it;
    for(it = v_p.begin();it!=v_p.end();it ++){
        cout << it->first << it->second << "\n";
    }
    
    return 0;
}

_______________________
________________________________________________________________________________
Use of auto keyword for the iterations :

#include<iostream>
#include<vector>
using namespace std;
int main(){
    vector <int> v = {1,2,3,4,5};
    for(auto it = v.begin(); it !=v.end();it++)
    cout << (*it) << " ";
    cout << endl;

    for(int value :v )
    cout << value << " ";
    return 0;

}
________________________________________________________________________________
// MAP

#include<iostream>
#include<map>
using namespace std;
void print(map<int,string> &m){
     for(auto &pr:m)
 cout << pr.first<< " " << pr.second << endl;
}
int  main(){
 map<int,string> m;
 m[1] = "abc";
 m[2] = "cde";
 m[7]= "efg";
 m[9]="kjl";
 m[4]="lmn";
 m.insert({6,"hello"});
 print(m);cout << "\n";
auto it = m.find(3); //take iterator as parameter
if(it!=m.end())
m.erase(it); //takes it or element as parameter

print(m);
//-----------------------------------------------------------------------------------------
// taking the key as input in map
map<string,int> j;
int n;
cout << "total numbers of string\n";
cin >> n; 
for(int i =0;i<n;++i){
    string s;
    cin >> s;
    j[s]++;
}
for(auto pr:j){
    cout << pr.first << " " << pr.second<<endl;
}
 return 0;
}
______________________________________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________________________________
SET

#include <iostream>
#include<set>
using namespace std;
int main() { 
    // ordered set
    int n;
    cin >> n;
set <string> s;
for(int i=0;i<n;i++){
    string str;
    cin >> str;
    s.insert(str);
 }
for(auto value : s){
    cout << value << "\n";
}
//____________________________________________________________________________
// query based simple set question
#include<bits/stdc++.h>
using namespace std;
int main() { 
    int n;
    cin >> n;
unordered_set <string> s;
for(int i=0;i<n;i++){
    string str;
    cin >> str;
    s.insert(str);
 }
 int q;
 cin >> q;
 while(q--){
     string str1;
     cin >> str1;
     if(s.find(str1)!=s.end()){
         cout << "Yes\n";
     }
     else{
         cout << "No\n";
     }
 }

    return 0;
}

//____________________________________________________________________________
multiset concept
#include<bits/stdc++.h>
using namespace std;
int main(){
    int t;
    cin >> t;
    while(t--){
        int n,k;
        cin >> n >> k;
        multiset<long long> bags;
        for(int i=0;i<n;i++){
            long long candy_ct;
            cin >> candy_ct;
            bags.insert(candy_ct);
        }
        long long total_candies =0;
        for(int j=0;j<k;j++){
            auto it = --bags.end();
            long long candy_cnt = (*it);
            total_candies += candy_cnt;
            bags.erase(it);
            bags.insert(candy_cnt/2);
        }
        cout << total_candies<< endl;
    }
    return 0;
}

/____________________________________________________________________________
NESTING IN STL
#include<bits/stdc++.h>
using namespace std;
int main(){
    // here we want to store first name,last name and marks of a kid, pair will save the full name,and vector will save the marks.
    map<pair<string,string>,vector<int>> m;
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
        string fn,ln;
        int ct;
        cin >> fn>>ln>>ct;
        for(int j=0;j<ct;j++){
            int x;
            cin >>x;
            m[{fn,ln}].push_back(x);
        }
    }
    for(auto &mp : m){
        auto &pr = mp.first;
        auto &num = mp.second;
        cout << pr.first << " " << pr.second << endl;
        cout << "size: "<< num.size()<< endl; //printing the vector part
        for(auto &element : num){
            cout << element<< "\t";
        }
        cout << endl;
    }
    return 0;
}
/____________________________________________________________________________/____________________________________________________________________________
//Lower bound STL and Upper bound STL
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin >>n;
    int a[n];
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    sort(a,a+n);
    for(int i=0;i<n;i++){
        cout << a[i]<< " ";
    }
    cout << endl;
    int i;
    cin >>i;
    int *ptr = lower_bound(a,a+n,i);
    cout << (*ptr) <<"\n"; 
   
    return 0;
}

/____________________________________________________________________________/____________________________________________________________________________
//Simple algorithms
#include<bits/stdc++.h>
#include<algorithm>
using namespace std;
int main(){
    int n;
    cin >>n;
    int a[n];
    for(int i=0;i<n;i++){
        cin >> a[i]; 
    }
 int min = *min_element(a,a+n);
 int max = *max_element(a,a+n);
  cout << accumulate(a, a + n, 0)<<"\n";
 int ct = count(a,a+n,5);
 cout << min << "\n"<< max << "\n"<< ct << "\n";
 reverse(a,a+n);
 for(int i=0;i<n;i++){
     cout << a[i] << " ";
 }
    return 0;
}
 LAMBDA FUNCTION---
 #include<bits/stdc++.h>
using namespace std;
int main(){
vector<int> v = {2,4,8,-6};
cout << all_of(v.begin(),v.end(),[](int x){return x %2==0;}) <<endl;; //use of lamda function
cout << any_of(v.begin(),v.end(),[](int x){return x >0;}) << endl;
cout << none_of(v.begin(),v.end(),[](int x){return x >0;});
    return 0;
}
