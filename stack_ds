{stack_array}
#include<bits/stdc++.h>
#define MAX_SIZE 101
using namespace std;
    int A[MAX_SIZE];
    int top = -1;
    void push(int x){
    if(top == MAX_SIZE -1){
        cout << "Array is Exhausted.\n";
        return;
    }
    A[++top] = x;
}

void Pop(){
    if(top == -1){
        cout << "Stack has no element to pop\n";
        return;
    }
    top--;
}

int Top(){
    return A[top];
}

void Print(){
    cout << "Stack: ";
    for(int i=0;i<=top;i++){
        cout << A[i]<<",";
    }
    cout <<endl;
}
int main(){
push(2);Print();
push(5);Print();
push(10);Print();
push(10);Print();
push(1);Print();
Pop();Print();
push(12);Print();
}

Linked List Array
#include<bits/stdc++.h>
using namespace std;

struct node{
    int data;
    struct node* link;  //pointer variable named link which points at the next node 
};
struct node* top = NULL; //declaring the pointer variable named TOP(head) 
//when list is empty it is NULL // so essentially stack is empty at first
void Push(int x){
    struct node* temp = new node;
    temp->data = x;
    temp->link = top;
    top = temp;
}
void Pop(){
    struct node*temp;
    if(top ==NULL) return;
    temp = top;
    top = top->link;
    free(temp);
}
void print(){
    struct node* temp = top; //starting from top and traversing to the end
    while(temp!=NULL){
        cout << temp->data <<",";
        temp = temp->link;
    }
    cout << endl;
}
int main(){
    Push(9);print();
    Push(10);print();
    Push(11);print();
    Push(12);print();
    Pop();print();
    Push(12);print();
    return 0;
}
